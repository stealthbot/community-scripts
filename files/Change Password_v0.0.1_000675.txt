Option Explicit
Script("Name") = "Change Password"
Script("Author") = "Hdx"
Script("Major") = 0
Script("Minor") = 0
Script("Revision") = 1
Script("HandleErrors") = True
'=================================================================
'  This script will allow you to change the password for your
'Battle.net account. Use the command /ChangePass <New Password>
'can be done while online, or offline, as it requires a reconnect
'either way.
'
'Changelog:
' v0.0.1:
'  NLS Support, 1st release
' v0.0.0:
'  OLS support.
'=================================================================

'=================================================================
'  Global variables to hold various state info
'=================================================================
Private change_pass
Private NewPass
Private ServerToken
Private ClientToken
Private NLS
'=================================================================
'  Constants used in the code
'=================================================================
Private Const SID_CHANGEPASSWORD          = &H31
Private Const SID_LOGONRESPONSE2          = &H3A
Private Const SID_AUTH_ACCOUNTCREATE      = &H52
Private Const SID_AUTH_ACCOUNTLOGON       = &H53
Private Const SID_AUTH_ACCOUNTCHANGE      = &H55
Private Const SID_AUTH_ACCOUNTCHANGEPROOF = &H56
'=================================================================

Sub Event_Load()
  Dim cmd, arg
  Set cmd = OpenCommand("ChangePassword")
  If (cmd is Nothing) Then
    Set cmd = CreateCommand("ChangePassword")
    cmd.Aliases.Add "ChangePass"
    cmd.Description = "Changes the current account's password."
    cmd.RequiredRank = -1
    
    Set arg = cmd.NewParameter("New Password", false, "String")
    arg.Description = "The new password to set."
    cmd.Parameters.Add arg
    
    cmd.Save
  End If
  
  change_pass = false
End Sub

Sub Event_LoggedOn(Username, Product)
End Sub

Sub Event_Command(cmd)
  If (LCase(cmd.Name) = "changepassword") Then
    If (cmd.IsValid) Then
      NewPass = LCase(cmd.Argument("New Password"))
      change_pass = true
      
      If (cmd.IsLocal) Then
        AddChat vbRed, "Warning: ", vbWhite, "(Console)", vbRed, " is changing the password to: ", vbWhite, NewPass
     Else
        AddChat vbRed, "Warning: ", vbWhite, cmd.Username, vbRed, " is changing the password to: ", vbWhite, NewPass
      End If
      
      'Reconnect, or connect...
      Call Connect()
    Else
      cmd.Respond "You must specify a password to change to."
    End If
  End If
End Sub

Sub Event_PacketReceived(Protocol, ID, Length, Data)
  If (Protocol = "BNCS") Then
    'AddChat vbBlue, StringFormat("Recv 0x{0}", Right(StringFormat("00{0}", Hex(ID)), 2))
    Select Case ID
      Case SID_CHANGEPASSWORD:          Call Recv_SID_CHANGEPASSWORD         (Mid(Data, 5))
      Case SID_AUTH_ACCOUNTCHANGE:      Call Recv_SID_AUTH_ACCOUNTCHANGE     (Mid(Data, 5))
      Case SID_AUTH_ACCOUNTCHANGEPROOF: Call Recv_SID_AUTH_ACCOUNTCHANGEPROOF(Mid(Data, 5))
    End Select
  End If
End Sub

Sub Event_PacketSent(Protocol, ID, Length, Data)
  If (Protocol = "BNCS") Then
    'AddChat vbBlue, StringFormat("Send 0x{0}", Right(StringFormat("00{0}", Hex(ID)), 2))
    Select Case ID
      Case SID_LOGONRESPONSE2:    Call Sending_SID_LOGONRESPONSE2   (Mid(Data, 5))
      Case SID_AUTH_ACCOUNTLOGON: Call Sending_SID_AUTH_ACCOUNTLOGON(Mid(Data, 5))
    End Select
  End If
End Sub

'============================================================
' This will detour the SID_LOGONRESPONSE2 message, extracting
'the data we need to change the password.
'============================================================
'(DWORD) Client Token
'(DWORD) Server Token
'(DWORD) [5] Password Hash
'(STRING) Username
'=============================================================
Private Sub Sending_SID_LOGONRESPONSE2(Data)
  If (change_pass = True) Then
    Dim buff, old_hash
    Set buff    = DataBufferEx()
    buff.Data   = Data
    ClientToken = buff.GetDWORD()
    ServerToken = buff.GetDWORD()
    old_hash    = buff.GetRaw(20) 'This is actually a SHA1 hash, but we treat it like a memory chunk
    Set buff    = Nothing
    VetoThisMessage
    Call Send_SID_CHANGEPASSWORD(old_hash)
  End If
End Sub

'============================================================
' This sends SID_CHANGEPASSWORD which does the actual work
'for OLS Style logins.
'============================================================
'(DWORD) Client Token
'(DWORD) Server Token
'(DWORD) [5] Old password hash
'(DWORD) [5] New password hash
'(STRING) Account name
'=============================================================
Private Sub Send_SID_CHANGEPASSWORD(OldHash)
  Dim buff, new_hash
  AddChat vbYellow, "[BNCS] Changing password from ", vbWhite, BotVars.Password, vbYellow, " to ", vbWhite, NewPass
  new_hash = XSHA1(LCase(NewPass))
  
  If (Not Len(new_hash) = 20) Then
    AddChat vbRed, "[BNCS] Error: x-SHA1 failed to produce a proper hash for the new password, aborting"
    change_pass = false
    Connect
    Exit Sub
  End If
  
  Set buff = DataBufferEx()
  buff.InsertDWORD ClientToken
  buff.InsertDWORD ServerToken
  buff.InsertNonNTString OldHash
  buff.InsertNonNTString new_hash
  buff.InsertNTString BotVars.Username
  buff.SendPacket SID_CHANGEPASSWORD
  
  Set buff = Nothing
End Sub

'============================================================
'  This is the response, if the password was changed 
'correctly, we can continue to login.
'============================================================
'(DWORD) Success
'=============================================================
Private Sub Recv_SID_CHANGEPASSWORD(Data)
  Dim buff, new_hash
 
  Set buff = DataBufferEx()
  buff.Data = Data
  If (buff.GetDWORD() = 1) Then
    AddChat vbGreen, "[BNCS] Password Changed Successfully"
    BotVars.Password = NewPass
    WriteConfigEntry "Main", "Password", NewPass, GetConfigPath()
  Else
    AddChat vbRed, "[BNCS] Failed to change password"
  End If
  
  change_pass = false
  Call Send_SID_LOGONRESPONSE2()
  Set buff = Nothing
End Sub

'============================================================
' This will actually send SID_LOGONRESPONSE2 message, 
'so that we can continue login.
'============================================================
'(DWORD) Client Token
'(DWORD) Server Token
'(DWORD) [5] Password Hash
'(STRING) Username
'=============================================================
Private Sub Send_SID_LOGONRESPONSE2()
  Dim buff, hash
  Set buff     = DataBufferEx()
  buff.InsertDWORD ClientToken
  buff.InsertDWORD ServerToken
  buff.InsertNonNTString XSHA1(LCase(BotVars.Password))
  hash = XSHA1(buff.Data)
    
  buff.Clear
  buff.InsertDWORD ClientToken
  buff.InsertDWORD ServerToken
  buff.InsertNonNTString hash
  buff.InsertNTString BotVars.Username  
  buff.SendPacket SID_LOGONRESPONSE2
  
  AddChat vbYellow, "[BNCS] Sending login information..."
End Sub


'============================================================
'  This will detour the SID_AUTH_ACCOUNTLOGON message, 
'extracting the data we need to change the password.
'============================================================
'(BYTE) [32] Client Key ('A')
'(STRING) Username 
'=============================================================
Private Sub Sending_SID_AUTH_ACCOUNTLOGON(Data)
  If (change_pass = True) Then
    VetoThisMessage    
    Call Send_SID_AUTH_ACCOUNTCHANGE(Data)
  End If
End Sub

'============================================================
'  This sends SID_AUTH_ACCOUNTCHANGE which starts the process
'for NLS style logons. We use the NLS object, because it
'does the heavy lifting that VBs can't do.
'============================================================
'(BYTE) [32] Client Key ('A')
'(STRING) Username 
'=============================================================
Private Sub Send_SID_AUTH_ACCOUNTCHANGE(Data)
  Dim buff
  Set buff = DataBufferEx()
  Set NLS  = CreateNLS(BotVars.Username, BotVars.Password)
  
  AddChat vbYellow, "[BNCS] Changing password from ", vbWhite, BotVars.Password, vbYellow, " to ", vbWhite, NewPass
  NLS.AccountChange buff, NewPass
  buff.SendPacket SID_AUTH_ACCOUNTCHANGE
  
  Set buff = Nothing
End Sub

'============================================================
'  We have started the change, does the server accept and 
'want to continue?
'============================================================
'(DWORD) Status
'(BYTE) [32] Salt (s)
'(BYTE) [32] Server key (B)
'=============================================================
Private Sub Recv_SID_AUTH_ACCOUNTCHANGE(Data)
  Dim buff, status, s, B
 
  change_pass = false
  Set buff  = DataBufferEx()
  buff.Data = Data
  status    = buff.GetDWORD()
  s         = buff.GetRaw(32)
  B         = buff.GetRaw(32)
  buff.Clear
  
  Select Case status
    Case 0:
      AddChat vbGreen, "[BNCS] Password Change accepted, sending proof"
      NLS.AccountChangeProof buff, s, B, True
      buff.SendPacket SID_AUTH_ACCOUNTCHANGEPROOF
      
    Case 1:
      AddChat vbRed, "[BNCS] Login error - account does not exist."
      Set NLS = Nothing
      Set NLS = CreateNLS(BotVars.Username, NewPass)
      BotVars.Password = NewPass
      WriteConfigEntry "Main", "Password", NewPass, GetConfigPath()
      NLS.CreateAccount buff
      buff.SendPacket SID_AUTH_ACCOUNTCREATE
      
    Case 5: 'Honestly I have never ever seen this so i'm gunna skip
    Case Else:
      AddChat vbRed, StringFormat("[BNCS] Login error - Unknown SID_AUT_ACCOUNTCHANGE Response 0x{0}", Right(StringFormat("00{0}", Hex(ID)), 2))
      Disconnect
  End Select
  
  Set buff = Nothing
End Sub


'=============================================================
'  Alright, the change has been sent, did the server accept 
'it? If so continue with logon.
'=============================================================
'(DWORD) Status code
'(BYTE) [20] Server password proof for old password (M2) 
'=============================================================
Private Sub Recv_SID_AUTH_ACCOUNTCHANGEPROOF(Data)
  Dim buff, status, M2
 
  Set buff  = DataBufferEx()
  buff.Data = Data
  status    = buff.GetDWORD()
  M2        = buff.GetRaw(20)
  buff.Clear
  
  If (status = 0) Then
    AddChat vbGreen, "[BNCS] Password Changed Successfully, reconnecting"
    BotVars.Password = NewPass
    WriteConfigEntry "Main", "Password", NewPass, GetConfigPath()
    Connect
  Else
    AddChat vbRed, "[BNCS] Password change failed, invalid old password"
    Disconnect
  End If
  
  Change_pass = false
  Set NLS = Nothing
  Set buff = Nothing
End Sub

